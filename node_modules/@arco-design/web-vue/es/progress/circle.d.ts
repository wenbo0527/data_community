import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    percent: {
        type: NumberConstructor;
        default: number;
    };
    type: {
        type: StringConstructor;
    };
    size: {
        type: PropType<"mini" | "medium" | "large" | "small">;
        default: string;
    };
    strokeWidth: {
        type: NumberConstructor;
    };
    width: {
        type: NumberConstructor;
        default: undefined;
    };
    color: {
        type: (ObjectConstructor | StringConstructor)[];
        default: undefined;
    };
    trackColor: StringConstructor;
    status: {
        type: StringConstructor;
        default: undefined;
    };
    showText: {
        type: BooleanConstructor;
        default: boolean;
    };
    pathStrokeWidth: {
        type: NumberConstructor;
    };
}>, {
    prefixCls: string;
    isLinearGradient: boolean;
    radius: import("vue").ComputedRef<number>;
    text: import("vue").ComputedRef<string>;
    perimeter: import("vue").ComputedRef<number>;
    center: import("vue").ComputedRef<number>;
    mergedWidth: import("vue").ComputedRef<number>;
    mergedStrokeWidth: import("vue").ComputedRef<number>;
    mergedPathStrokeWidth: import("vue").ComputedRef<number>;
    linearGradientId: import("vue").ComputedRef<string>;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    percent: {
        type: NumberConstructor;
        default: number;
    };
    type: {
        type: StringConstructor;
    };
    size: {
        type: PropType<"mini" | "medium" | "large" | "small">;
        default: string;
    };
    strokeWidth: {
        type: NumberConstructor;
    };
    width: {
        type: NumberConstructor;
        default: undefined;
    };
    color: {
        type: (ObjectConstructor | StringConstructor)[];
        default: undefined;
    };
    trackColor: StringConstructor;
    status: {
        type: StringConstructor;
        default: undefined;
    };
    showText: {
        type: BooleanConstructor;
        default: boolean;
    };
    pathStrokeWidth: {
        type: NumberConstructor;
    };
}>> & Readonly<{}>, {
    size: "mini" | "medium" | "large" | "small";
    color: string | Record<string, any>;
    width: number;
    status: string;
    showText: boolean;
    percent: number;
}, {}, {
    IconExclamation: any;
    IconCheck: any;
}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default _default;
