/**
 * 结束节点配置
 * 用于增强预设线系统的自动结束节点功能
 */

/**
 * 结束节点的默认配置
 */
export const END_NODE_CONFIG = {
  type: 'end',
  width: 120,
  height: 60,
  shape: 'rect',
  attrs: {
    body: {
      stroke: '#ff6b6b',
      strokeWidth: 2,
      fill: '#ffe0e0',
      rx: 8,
      ry: 8
    },
    text: {
      fontSize: 14,
      fontWeight: 'bold',
      fill: '#ff6b6b',
      textAnchor: 'middle',
      textVerticalAnchor: 'middle'
    }
  },
  markup: [
    {
      tagName: 'rect',
      selector: 'body'
    },
    {
      tagName: 'text',
      selector: 'text'
    }
  ],
  ports: {
    groups: {
      input: {
        position: 'left',
        attrs: {
          circle: {
            r: 6,
            magnet: true,
            stroke: '#ff6b6b',
            strokeWidth: 2,
            fill: '#fff'
          }
        }
      }
    },
    items: [
      {
        id: 'input-1',
        group: 'input'
      }
    ]
  }
}

/**
 * 创建结束节点数据
 * @param {Object} options - 节点选项
 * @param {string} options.id - 节点ID
 * @param {Object} options.position - 节点位置 {x, y}
 * @param {string} options.label - 节点标签
 * @returns {Object} 结束节点数据
 */
export function createEndNodeData(options = {}) {
  const {
    id = `end-${Date.now()}`,
    position = { x: 0, y: 0 },
    label = '结束'
  } = options

  return {
    id,
    type: 'end',
    position,
    label,
    config: {
      name: label,
      description: '流程结束节点',
      isAutoGenerated: true // 标记为自动生成的节点
    },
    data: {
      type: 'end',
      config: {
        name: label,
        description: '流程结束节点',
        isAutoGenerated: true
      }
    }
  }
}

/**
 * 获取结束节点的X6配置
 * @param {Object} nodeData - 节点数据
 * @returns {Object} X6节点配置
 */
export function getEndNodeX6Config(nodeData) {
  return {
    id: nodeData.id,
    shape: 'rect',
    x: nodeData.position.x,
    y: nodeData.position.y,
    width: END_NODE_CONFIG.width,
    height: END_NODE_CONFIG.height,
    label: nodeData.label || '结束',
    attrs: END_NODE_CONFIG.attrs,
    markup: END_NODE_CONFIG.markup,
    ports: END_NODE_CONFIG.ports,
    data: nodeData.data || {
      type: 'end',
      config: nodeData.config || {}
    }
  }
}

/**
 * 检查节点是否为结束节点
 * @param {Object} node - 节点数据或X6节点实例
 * @returns {boolean} 是否为结束节点
 */
export function isEndNode(node) {
  if (!node) return false
  
  // 检查节点数据
  if (node.type === 'end') return true
  
  // 检查X6节点实例
  if (node.getData && typeof node.getData === 'function') {
    const data = node.getData()
    return data?.type === 'end'
  }
  
  return false
}

/**
 * 检查节点是否为自动生成的结束节点
 * @param {Object} node - 节点数据或X6节点实例
 * @returns {boolean} 是否为自动生成的结束节点
 */
export function isAutoGeneratedEndNode(node) {
  if (!isEndNode(node)) return false
  
  // 检查节点数据
  if (node.config?.isAutoGenerated) return true
  
  // 检查X6节点实例
  if (node.getData && typeof node.getData === 'function') {
    const data = node.getData()
    return data?.config?.isAutoGenerated === true
  }
  
  return false
}

/**
 * 计算结束节点的最佳位置
 * @param {Object} sourceNode - 源节点
 * @param {number} offsetX - X轴偏移量
 * @param {number} offsetY - Y轴偏移量
 * @returns {Object} 位置坐标 {x, y}
 */
export function calculateEndNodePosition(sourceNode, offsetX = 200, offsetY = 0) {
  if (!sourceNode) {
    return { x: 0, y: 0 }
  }
  
  let sourcePosition
  
  // 获取源节点位置
  if (sourceNode.getPosition && typeof sourceNode.getPosition === 'function') {
    // X6节点实例
    sourcePosition = sourceNode.getPosition()
  } else if (sourceNode.position) {
    // 节点数据
    sourcePosition = sourceNode.position
  } else {
    sourcePosition = { x: 0, y: 0 }
  }
  
  return {
    x: sourcePosition.x + offsetX,
    y: sourcePosition.y + offsetY
  }
}