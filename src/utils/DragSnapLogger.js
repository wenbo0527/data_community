/**
 * ÊãñÊãΩÂê∏ÈôÑÊó•ÂøóÁÆ°ÁêÜÂô®
 * ‰ºòÂåñÊó•ÂøóËæìÂá∫ÔºåÂáèÂ∞ëËøáÁ®ãÊó•ÂøóÔºåÂè™Âú®ÊãñÊãΩÁªìÊùüÊó∂Â±ïÁ§∫ÂÖ≥ÈîÆ‰ø°ÊÅØ
 */

class DragSnapLogger {
  constructor() {
    this.dragSessions = new Map() // Â≠òÂÇ®ÊãñÊãΩ‰ºöËØù‰ø°ÊÅØ
    this.isDebugMode = false // Ë∞ÉËØïÊ®°ÂºèÂºÄÂÖ≥
  }

  /**
   * ÂºÄÂßãÊãñÊãΩ‰ºöËØù
   * @param {string} sessionId - ÊãñÊãΩ‰ºöËØùID
   * @param {Object} startInfo - ÂºÄÂßãÊãñÊãΩÁöÑ‰ø°ÊÅØ
   */
  startDragSession(sessionId, startInfo) {
    this.dragSessions.set(sessionId, {
      sessionId,
      startTime: Date.now(),
      startInfo,
      processLogs: [], // Â≠òÂÇ®ËøáÁ®ã‰∏≠ÁöÑÂÖ≥ÈîÆ‰ø°ÊÅØÔºå‰ΩÜ‰∏çÁ´ãÂç≥ËæìÂá∫
      endInfo: null
    })

    if (this.isDebugMode) {
      // Â∑≤Á¶ÅÁî®ÊãñÊãΩÂºÄÂßãÊó•Âøó‰ª•ÂáèÂ∞ëÊéßÂà∂Âè∞ÂÜó‰Ωô‰ø°ÊÅØ
      // console.log('üöÄ [ÊãñÊãΩÂºÄÂßã]', {
      //   sessionId,
      //   startInfo,
      //   timestamp: new Date().toISOString()
      // })
    }
  }

  /**
   * ËÆ∞ÂΩïÊãñÊãΩËøáÁ®ã‰ø°ÊÅØÔºà‰∏çÁ´ãÂç≥ËæìÂá∫Ôºâ
   * @param {string} sessionId - ÊãñÊãΩ‰ºöËØùID
   * @param {string} type - Êó•ÂøóÁ±ªÂûã
   * @param {Object} data - Êó•ÂøóÊï∞ÊçÆ
   */
  logProcess(sessionId, type, data) {
    const session = this.dragSessions.get(sessionId)
    if (session) {
      session.processLogs.push({
        type,
        data,
        timestamp: Date.now()
      })
    }
  }

  /**
   * ÁªìÊùüÊãñÊãΩ‰ºöËØùÂπ∂ËæìÂá∫ÂÆåÊï¥Êó•Âøó
   * @param {string} sessionId - ÊãñÊãΩ‰ºöËØùID
   * @param {Object} endInfo - ÁªìÊùüÊãñÊãΩÁöÑ‰ø°ÊÅØ
   */
  endDragSession(sessionId, endInfo) {
    const session = this.dragSessions.get(sessionId)
    if (!session) return

    session.endInfo = endInfo
    session.endTime = Date.now()
    session.duration = session.endTime - session.startTime

    // ËæìÂá∫ÂÆåÊï¥ÁöÑÊãñÊãΩ‰ºöËØùÊó•Âøó
    this.outputDragSessionSummary(session)

    // Ê∏ÖÁêÜ‰ºöËØù
    this.dragSessions.delete(sessionId)
  }

  /**
   * ËæìÂá∫ÊãñÊãΩ‰ºöËØùÊëòË¶Å
   * @param {Object} session - ÊãñÊãΩ‰ºöËØù‰ø°ÊÅØ
   */
  outputDragSessionSummary(session) {
    const { startInfo, endInfo, duration, processLogs } = session

    // ÊûÑÂª∫ÊëòË¶Å‰ø°ÊÅØ
    const summary = {
      sessionId: session.sessionId,
      duration: `${duration}ms`,
      timestamp: new Date().toISOString(),
      
      // ÂºÄÂßãËäÇÁÇπ‰ø°ÊÅØ
      startNode: {
        id: startInfo.nodeId,
        type: startInfo.nodeType,
        position: startInfo.startPosition,
        name: startInfo.nodeName
      },

      // ÁªìÊùüËäÇÁÇπ‰ø°ÊÅØ
      endNode: endInfo.success ? {
        id: endInfo.targetNodeId,
        type: endInfo.targetNodeType,
        position: endInfo.endPosition,
        name: endInfo.targetNodeName
      } : null,

      // ÊãñÊãΩÁÇπ‰ø°ÊÅØ
      dragHint: {
        id: endInfo.dragHintId,
        branchId: endInfo.branchId,
        branchLabel: endInfo.branchLabel,
        finalPosition: endInfo.dragHintPosition
      },

      // ÊúÄËøëÁöÑÊôÆÈÄöËäÇÁÇπinÁ´ØÂè£ÂùêÊ†á
      nearestNodeInPort: this.findNearestNodeInPort(endInfo),

      // ÁªìÊûú‰ø°ÊÅØ
      result: {
        success: endInfo.success,
        action: endInfo.action, // 'connection', 'new_node', 'failed'
        snapDistance: endInfo.snapDistance,
        snapThreshold: endInfo.snapThreshold || 80
      },

      // ÂÖ≥ÈîÆËøáÁ®ã‰∫ã‰ª∂ÁªüËÆ°
      processStats: this.summarizeProcessLogs(processLogs)
    }

    // Ê†πÊçÆÁªìÊûúÁ±ªÂûãËæìÂá∫‰∏çÂêåÁöÑÊó•Âøó
    // Â∑≤Á¶ÅÁî®ÊãñÊãΩÂê∏ÈôÑÁªìÊûúÊó•Âøó‰ª•ÂáèÂ∞ëÊéßÂà∂Âè∞ÂÜó‰Ωô‰ø°ÊÅØ
    // if (endInfo.success) {
    //   console.log('‚úÖ [ÊãñÊãΩÂê∏ÈôÑÂÆåÊàê] ÊãñÊãΩÊàêÂäüÁªìÊùü:', summary)
    // } else {
    //   console.log('‚ùå [ÊãñÊãΩÂê∏ÈôÑÂ§±Ë¥•] ÊãñÊãΩÊú™ÊàêÂäüÂê∏ÈôÑ:', summary)
    // }
  }

  /**
   * Êü•ÊâæÊúÄËøëÁöÑÊôÆÈÄöËäÇÁÇπinÁ´ØÂè£ÂùêÊ†á
   * @param {Object} endInfo - ÁªìÊùü‰ø°ÊÅØ
   * @returns {Object|null} ÊúÄËøëËäÇÁÇπÁöÑinÁ´ØÂè£ÂùêÊ†á
   */
  findNearestNodeInPort(endInfo) {
    if (!endInfo.nearestNodes || endInfo.nearestNodes.length === 0) {
      return null
    }

    // ÊâæÂà∞ÊúÄËøëÁöÑÊôÆÈÄöËäÇÁÇπ
    const nearestNode = endInfo.nearestNodes.find(node => 
      node.type === 'normal' || !['endpoint', 'preview'].includes(node.type)
    )

    if (!nearestNode) return null

    // ËÆ°ÁÆóinÁ´ØÂè£ÂùêÊ†áÔºàÈÄöÂ∏∏Âú®ËäÇÁÇπÈ°∂ÈÉ®‰∏≠ÂøÉÔºâ
    const inPortPosition = {
      x: nearestNode.position.x + (nearestNode.size?.width || 100) / 2,
      y: nearestNode.position.y,
      nodeId: nearestNode.id,
      nodeType: nearestNode.type,
      distance: nearestNode.distance
    }

    return inPortPosition
  }

  /**
   * Ê±áÊÄªËøáÁ®ãÊó•Âøó
   * @param {Array} processLogs - ËøáÁ®ãÊó•ÂøóÊï∞ÁªÑ
   * @returns {Object} ËøáÁ®ãÁªüËÆ°‰ø°ÊÅØ
   */
  summarizeProcessLogs(processLogs) {
    const stats = {
      totalEvents: processLogs.length,
      snapDetections: 0,
      positionUpdates: 0,
      highlightChanges: 0,
      coordinateCorrections: 0
    }

    processLogs.forEach(log => {
      switch (log.type) {
        case 'snap_detection':
          stats.snapDetections++
          break
        case 'position_update':
          stats.positionUpdates++
          break
        case 'highlight_change':
          stats.highlightChanges++
          break
        case 'coordinate_correction':
          stats.coordinateCorrections++
          break
      }
    })

    return stats
  }

  /**
   * ËÆæÁΩÆË∞ÉËØïÊ®°Âºè
   * @param {boolean} enabled - ÊòØÂê¶ÂêØÁî®Ë∞ÉËØïÊ®°Âºè
   */
  setDebugMode(enabled) {
    this.isDebugMode = enabled
    console.log(`üîß [ÊãñÊãΩÊó•Âøó] Ë∞ÉËØïÊ®°Âºè${enabled ? 'Â∑≤ÂêØÁî®' : 'Â∑≤Á¶ÅÁî®'}`)
  }

  /**
   * Ê∏ÖÁêÜÊâÄÊúâ‰ºöËØù
   */
  clearAllSessions() {
    this.dragSessions.clear()
  }

  /**
   * Ëé∑ÂèñÂΩìÂâçÊ¥ªË∑ÉÁöÑ‰ºöËØùÊï∞Èáè
   * @returns {number} Ê¥ªË∑É‰ºöËØùÊï∞Èáè
   */
  getActiveSessionCount() {
    return this.dragSessions.size
  }
}

// ÂàõÂª∫ÂÖ®Â±ÄÂÆû‰æã
export const dragSnapLogger = new DragSnapLogger()

// ÂØºÂá∫Á±ª‰ª•‰æøÊµãËØï
export { DragSnapLogger }

/**
 * ÊãñÊãΩ‰ºöËØùIDÁîüÊàêÂô®
 * @param {string} nodeId - ËäÇÁÇπID
 * @returns {string} ‰ºöËØùID
 */
export function generateDragSessionId(nodeId) {
  return `drag_${nodeId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
}

/**
 * Âø´Êç∑ÊñπÊ≥ïÔºöÂºÄÂßãËäÇÁÇπÊãñÊãΩÊó•ÂøóËÆ∞ÂΩï
 * @param {Object} node - ËäÇÁÇπÂØπË±°
 * @param {Object} position - ÂºÄÂßã‰ΩçÁΩÆ
 * @returns {string} ‰ºöËØùID
 */
export function startNodeDragLogging(node, position) {
  const sessionId = generateDragSessionId(node.id)
  const nodeData = node.getData() || {}
  
  dragSnapLogger.startDragSession(sessionId, {
    nodeId: node.id,
    nodeType: nodeData.type,
    nodeName: nodeData.name || nodeData.label,
    startPosition: { ...position },
    startTime: Date.now()
  })
  
  return sessionId
}

/**
 * Âø´Êç∑ÊñπÊ≥ïÔºöÁªìÊùüËäÇÁÇπÊãñÊãΩÊó•ÂøóËÆ∞ÂΩï
 * @param {string} sessionId - ‰ºöËØùID
 * @param {Object} endPosition - ÁªìÊùü‰ΩçÁΩÆ
 * @param {Object} nearestInPortCoord - ÊúÄËøëÁöÑÊôÆÈÄöËäÇÁÇπinÁ´ØÂè£ÂùêÊ†á
 */
export function endNodeDragLogging(sessionId, endPosition, nearestInPortCoord) {
  const session = dragSnapLogger.dragSessions.get(sessionId)
  if (!session) return

  // ‰ªéËøáÁ®ãÊó•Âøó‰∏≠ÊèêÂèñÂÖ≥ÈîÆ‰ø°ÊÅØ
  const snapDetection = session.processLogs.find(log => log.type === 'snap_detection')
  const connectionCreated = session.processLogs.find(log => log.type === 'connection_created')
  const beforeSnap = session.processLogs.find(log => log.type === 'before_snap')

  // ÊûÑÂª∫ÁªìÊùü‰ø°ÊÅØ
  const endInfo = {
    endPosition: { ...endPosition },
    nearestInPortCoord,
    success: !!connectionCreated,
    action: connectionCreated ? 'connection' : 'failed',
    snapDistance: snapDetection?.data?.nearestDistance,
    snapThreshold: snapDetection?.data?.threshold || 80,
    dragHintId: beforeSnap?.data?.dragHint?.id,
    branchId: connectionCreated?.data?.connection?.branchId,
    branchLabel: connectionCreated?.data?.connection?.branchLabel,
    dragHintPosition: beforeSnap?.data?.dragHint?.position,
    targetNodeId: connectionCreated?.data?.connection?.targetId,
    targetNodeType: session.startInfo.nodeType,
    targetNodeName: session.startInfo.nodeName,
    nearestNodes: nearestInPortCoord ? [{
      id: nearestInPortCoord.nodeId,
      type: nearestInPortCoord.nodeType,
      position: { x: nearestInPortCoord.x, y: nearestInPortCoord.y },
      distance: nearestInPortCoord.distance
    }] : []
  }

  dragSnapLogger.endDragSession(sessionId, endInfo)
}